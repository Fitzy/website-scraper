service: website-scraper

provider:
    name: aws
    region: ${file(secrets.yml):REGION}
    runtime: nodejs10.x
    memorySize: 2048
    timeout: 60
    environment: ${file(secrets.yml)}
    iamRoleStatements:
        - Effect: Allow
          Action:
          - dynamodb:DescribeTable
          - dynamodb:Query
          - dynamodb:Scan
          - dynamodb:GetItem
          - dynamodb:PutItem
          - dynamodb:UpdateItem
          - dynamodb:DeleteItem
          # Restrict our IAM role permissions to
          # the specific table for the stage
          Resource:
          - "Fn::GetAtt": [ WebsiteConfig, Arn ]
          - "Fn::GetAtt": [ WebsiteCapture, Arn ]
          - Fn::Join:
            - "/"
            -
                - "Fn::GetAtt": ["WebsiteCapture", "Arn" ]
                - "index/*"
        - Effect: Allow
          Action:
          - s3:PutObject
          - s3:PutObjectAcl
          Resource:
          - Fn::Join:
            - ""
            -
                - "arn:aws:s3:::"
                - ${file(secrets.yml):SCREENSHOT_UPLOADS_S3_BUCKET_NAME}
                - "/*"
functions:
    scraper-function:
        handler: index.handler
        events:
            - schedule: rate(1 hour)
        environment:
            DEBUG: 0

package:
    exclude:
        - node_modules/puppeteer/.local-chromium/**

custom:
    chrome:
        flags:
            - --window-size=1280,1696 # Letter size
            - --hide-scrollbars
            - --ignore-certificate-errors
        functions:
            - scraper-function

# Create our resources with separate CloudFormation templates
resources:
  # DynamoDB
  - ${file(resources/dynamodb-table.yml)}
  # S3
  - ${file(resources/s3-screenshot-uploads.yml)}